/**
 * Modul cardManager untuk mengelola operasi CRUD kartu
 * Menggunakan state dan metode untuk mengontrol modal, validasi, AJAX, dan UI
 * Menggunakan Swal untuk alert dan fetch API untuk komunikasi server
 */
export function cardManager() {
    return {
        // Status modal
        openCreateModal: false, // Modal tambah kartu
        openEditModalId: null, // Modal edit kartu dengan ID tertentu
        openDeleteModalId: null, // Modal hapus kartu dengan ID tertentu
        cardData: {}, // Data kartu yang sedang diedit atau dihapus
        errors: {}, // Error validasi form
        loading: false, // Status loading spinner
        openValidationModal: false, // Modal validasi (tidak digunakan di sini)
        openSuccessModal: false, // Modal sukses (tidak digunakan di sini)
        successMessage: "", // Pesan sukses
        searchQuery: "", // Query pencarian kartu
        searching: false, // Status pencarian sedang berjalan

        // Tambahkan interval ID untuk polling
        pollingIntervalId: null,

        // Inisialisasi komponen
        init() {
            // Ambil query pencarian dari URL jika ada
            const urlParams = new URLSearchParams(window.location.search);
            this.searchQuery = urlParams.get("search") || "";

            // Mulai polling untuk refresh data kartu setiap 5 detik
            this.pollingIntervalId = setInterval(() => {
                this.refreshCardTable();
            }, 5000);
        },

        // Fungsi pencarian kartu dengan AJAX
        async handleSearch() {
            this.searching = true;

            try {
                const response = await fetch(
                    `${window.location.pathname}?search=${this.searchQuery}`,
                    {
                        headers: {
                            "X-Requested-With": "XMLHttpRequest",
                        },
                    }
                );

                if (!response.ok) throw new Error("Gagal melakukan pencarian");

                const data = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(data, "text/html");
                const newTable = doc.querySelector("tbody");

                if (newTable) {
                    // Update isi tabel dengan hasil pencarian
                    document.querySelector("tbody").innerHTML =
                        newTable.innerHTML;
                }
            } catch (error) {
                this.showError(error.message);
            } finally {
                this.searching = false;
            }
        },

        // Helper untuk menampilkan pesan error menggunakan Swal
        showError(message) {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: message,
            });
        },

        // Helper untuk menampilkan pesan sukses menggunakan Swal
        showSuccess(message) {
            return Swal.fire({
                icon: "success",
                title: "Sukses",
                text: message,
                showConfirmButton: false,
                timer: 2000,
            });
        },

        // Tutup semua modal dan reset state terkait
        closeAllModals() {
            this.openCreateModal = false;
            this.openEditModalId = null;
            this.openDeleteModalId = null;
            this.errors = {};
            this.preview = null;
            this.previewEdit = null;
        },

        // Buka modal edit dan ambil data kartu dari server
        async openEditModal(id) {
            this.loading = true;
            this.errors = {};

            try {
                const response = await fetch(`/admin/cards/${id}/edit`);
                if (!response.ok)
                    throw new Error("Gagal mengambil data kartu.");

                const data = await response.json();
                // Pastikan URL gambar lengkap untuk preview
                if (data.image_url && !data.image_url.startsWith("http")) {
                    data.image_url = `${window.location.origin}/storage/${data.image_url}`;
                }
                this.cardData = data;
                this.openEditModalId = id;
                this.previewEdit = null;
                if (this.$refs.editImageInput) {
                    this.$refs.editImageInput.value = null;
                }
                // Reset nilai input file agar bisa dipilih ulang
                if (this.$refs.editImageInput) {
                    this.$refs.editImageInput.value = null;
                }
            } catch (error) {
                this.showError(error.message);
            } finally {
                this.loading = false;
            }
        },

        // Buka modal konfirmasi hapus dan set data kartu dari baris tabel
        openDeleteModal(id, event) {
            this.openDeleteModalId = id;
            if (event) {
                const row = event.target.closest("tr");
                if (row) {
                    this.cardData = {
                        title: row.cells[1].textContent,
                        description: row.cells[2].textContent,
                        external_link:
                            row.cells[3].querySelector("a")?.href || "",
                        image_url: row.cells[4].querySelector("img")?.src || "",
                    };
                }
            }
        },

        // Submit form tambah kartu dengan validasi client-side dan AJAX
        async submitCreateForm() {
            this.errors = {};

            // Validasi client-side
            if (!this.createForm.title || this.createForm.title.trim() === "") {
                this.errors.title = ["Nama/Judul Kartu wajib diisi."];
            }
            if (
                !this.createForm.description ||
                this.createForm.description.trim() === ""
            ) {
                this.errors.description = ["Deskripsi wajib diisi."];
            }
            // Validasi gambar menggunakan input file form
            const fileInput = this.$refs.createForm.querySelector(
                'input[name="image_url"]'
            );
            const hasImage =
                fileInput && fileInput.files && fileInput.files.length > 0;
            if (!hasImage) {
                this.errors.image_url = ["Gambar harus diunggah."];
            }

            // Jika ada error validasi client-side, hentikan submit
            if (Object.keys(this.errors).length > 0) {
                this.loading = false; // pastikan loading false saat error validasi client-side
                return;
            }

            this.loading = true;

            try {
                const formData = new FormData(this.$refs.createForm);
                const storeUrl = document.querySelector("#store_route").value;

                const response = await fetch(storeUrl, {
                    method: "POST",
                    headers: {
                        Accept: "application/json",
                        "X-CSRF-TOKEN": document.querySelector(
                            'meta[name="csrf-token"]'
                        ).content,
                    },
                    body: formData,
                });

                const data = await response.json();

                if (response.status === 422) {
                    this.errors = data.errors || {};
                    this.loading = false;
                    // Tetap buka modal dan tampilkan error inline
                    return;
                }

                if (!response.ok) {
                    this.loading = false;
                    await this.showError(
                        data.message || "Gagal menyimpan data."
                    );
                    // Tetap buka modal untuk koreksi
                    return;
                }

                // Tutup modal sebelum menampilkan pesan sukses
                this.openCreateModal = false;

                // Tampilkan pesan sukses
                await this.showSuccess(
                    data.message || "Kartu berhasil ditambahkan!"
                );

                // Reset form dan preview gambar
                this.createForm = {
                    title: "",
                    description: "",
                    external_link: "",
                    image_url: null,
                };
                this.preview = null;
                // Add small delay to ensure Alpine.js updates preview
                await new Promise((resolve) => setTimeout(resolve, 50));
                // Clear file input value to remove previous selected file
                const fileInput = this.$refs.createForm.querySelector(
                    'input[name="image_url"]'
                );
                if (fileInput) {
                    fileInput.value = null;
                }
                // Force Alpine.js to update preview immediately
                this.preview = null;

                // Refresh tabel tanpa reload halaman
                await this.refreshCardTable();
            } catch (error) {
                this.loading = false;
                await this.showError(error.message);
                // Tetap buka modal untuk koreksi
                return;
            } finally {
                this.loading = false;
            }
        },

        // Submit form edit kartu dengan validasi client-side dan AJAX
        async submitEditForm() {
            this.errors = {};
            this.loading = true; // tampilkan loading spinner saat tombol diklik

            // Delay agar loading spinner muncul di UI sebelum validasi
            await new Promise((resolve) => setTimeout(resolve, 400));

            // Validasi client-side
            if (!this.cardData.title || this.cardData.title.trim() === "") {
                this.errors.title = ["Nama/Judul Kartu wajib diisi."];
            }
            if (
                !this.cardData.description ||
                this.cardData.description.trim() === ""
            ) {
                this.errors.description = ["Deskripsi wajib diisi."];
            }
            // Cek apakah ada gambar lama atau baru
            const hasOldImage =
                this.cardData.image_url &&
                this.cardData.image_url.trim() !== "";
            const hasNewImage = this.previewEdit !== null;
            if (!hasOldImage && !hasNewImage) {
                this.errors.image_url = ["Gambar harus diunggah."];
            }

            // Jika ada error validasi client-side, hentikan submit
            if (Object.keys(this.errors).length > 0) {
                this.loading = false; // matikan loading spinner jika validasi gagal
                return;
            }

            try {
                const formData = new FormData(this.$refs.editForm);
                // Hapus field kosong untuk menghindari error validasi
                formData.forEach((value, key) => {
                    if (value === "" || value === null || value === undefined) {
                        formData.delete(key);
                    }
                });
                formData.set("_method", "PUT");

                const response = await fetch(
                    `/admin/cards/${this.openEditModalId}`,
                    {
                        method: "POST",
                        headers: {
                            Accept: "application/json",
                            "X-CSRF-TOKEN": document.querySelector(
                                'meta[name="csrf-token"]'
                            ).content,
                        },
                        body: formData,
                    }
                );

                const data = await response.json();

                if (response.status === 422) {
                    this.errors = data.errors || {};
                    this.loading = false;
                    // Tetap buka modal dan tampilkan error inline
                    return;
                }

                if (!response.ok) {
                    this.loading = false;
                    await this.showError(
                        data.message || "Gagal menyimpan data."
                    );
                    // Tetap buka modal untuk koreksi
                    return;
                }

                // Update URL gambar kartu jika ada dari response
                if (data.card && data.card.image_url) {
                    this.cardData.image_url = data.card.image_url;
                }

                // Reset previewEdit agar area upload tetap terlihat
                this.previewEdit = null;

                // Tutup modal sebelum menampilkan pesan sukses
                this.openEditModalId = null;

                // Refresh tabel sebelum menampilkan pesan sukses
                await this.refreshCardTable();

                // Tampilkan pesan sukses
                await this.showSuccess(
                    data.message || "Data kartu berhasil diperbarui!"
                );
            } catch (error) {
                this.loading = false;
                await this.showError(error.message);
                // Tetap buka modal untuk koreksi
                return;
            } finally {
                this.loading = false;
            }
        },

        // Submit form hapus kartu dengan AJAX
        async submitDeleteForm() {
            this.loading = true;
            this.errors = {};

            try {
                const response = await fetch(
                    `/admin/cards/${this.openDeleteModalId}`,
                    {
                        method: "DELETE",
                        headers: {
                            Accept: "application/json",
                            "X-CSRF-TOKEN": document.querySelector(
                                'meta[name="csrf-token"]'
                            ).content,
                        },
                    }
                );

                const data = await response.json();

                if (response.status === 422) {
                    this.errors = data.errors || {};
                    // Tutup modal segera
                    this.openDeleteModalId = null;
                    // Tampilkan popup error
                    await this.showError(data.message || "Validasi gagal.");
                    // Buka kembali modal untuk koreksi
                    this.openDeleteModalId = data.id || null;
                    return;
                }

                if (!response.ok) {
                    // Tutup modal segera
                    this.openDeleteModalId = null;
                    // Tampilkan popup error
                    await this.showError(
                        data.message || "Gagal menghapus data."
                    );
                    // Buka kembali modal untuk koreksi
                    this.openDeleteModalId = data.id || null;
                    return;
                }

                // Tutup modal sebelum menampilkan pesan sukses
                this.openDeleteModalId = null;

                // Tampilkan pesan sukses
                await this.showSuccess(
                    data.message || "Kartu berhasil dihapus!"
                );

                // Refresh tabel
                await this.refreshCardTable();
            } catch (error) {
                // Tutup modal segera
                this.openDeleteModalId = null;
                await this.showError(error.message);
                // Buka kembali modal untuk koreksi
                this.openDeleteModalId = null;
            } finally {
                this.loading = false;
            }
        },

        // Refresh tabel kartu tanpa reload halaman
        async refreshCardTable() {
            try {
                // Reset ke halaman pertama agar data baru/terupdate muncul
                const url = new URL(window.location.href);
                url.searchParams.set("page", "1");

                const response = await fetch(url.toString(), {
                    headers: {
                        "X-Requested-With": "XMLHttpRequest",
                    },
                    cache: "no-store",
                });

                if (!response.ok) throw new Error("Gagal memuat data kartu");

                const data = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(data, "text/html");
                const newTable = doc.querySelector("tbody");
                const newTotal = doc.querySelector("#totalCount");
                const newActiveCount = doc.querySelector("#activeCount");

                if (newTable) {
                    document.querySelector("tbody").innerHTML =
                        newTable.innerHTML;
                }

                if (newTotal) {
                    const totalElement = document.querySelector("#totalCount");
                    if (totalElement) {
                        totalElement.innerHTML = newTotal.innerHTML;
                    }
                }

                if (newActiveCount) {
                    const activeElement =
                        document.querySelector("#activeCount");
                    if (activeElement) {
                        activeElement.innerHTML = newActiveCount.innerHTML;
                    }
                }

                // Update pagination jika ada
                const newPagination = doc.querySelector(".pagination");
                if (newPagination) {
                    document.querySelector(".mt-4").innerHTML =
                        newPagination.outerHTML;
                }
            } catch (error) {
                console.error("Error refreshing table:", error);
                this.showError("Gagal memuat data terbaru");
            }
        },

        // Bersihkan preview gambar edit
        clearPreviewEdit() {
            this.previewEdit = null;
            if (this.$refs.editImageInput) {
                this.$refs.editImageInput.value = null;
            }
        },

        // Data form tambah kartu
        createForm: {
            title: "", // Judul kartu
            description: "", // Deskripsi kartu
            external_link: "", // Link eksternal terkait kartu
            // image_url: null, // URL gambar kartu (dihapus karena tidak dipakai)
        },

        // Preview gambar untuk form tambah dan edit
        preview: null, // Preview gambar tambah
        previewEdit: null, // Preview gambar edit

        // Inisialisasi komponen
        init() {
            // Ambil query pencarian dari URL jika ada
            const urlParams = new URLSearchParams(window.location.search);
            this.searchQuery = urlParams.get("search") || "";
        },

        // Fungsi pencarian kartu dengan AJAX
        async handleSearch() {
            this.searching = true;

            try {
                const response = await fetch(
                    `${window.location.pathname}?search=${this.searchQuery}`,
                    {
                        headers: {
                            "X-Requested-With": "XMLHttpRequest",
                        },
                    }
                );

                if (!response.ok) throw new Error("Gagal melakukan pencarian");

                const data = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(data, "text/html");
                const newTable = doc.querySelector("tbody");

                if (newTable) {
                    // Update isi tabel dengan hasil pencarian
                    document.querySelector("tbody").innerHTML =
                        newTable.innerHTML;
                }
            } catch (error) {
                this.showError(error.message);
            } finally {
                this.searching = false;
            }
        },

        // Helper untuk menampilkan pesan error menggunakan Swal
        showError(message) {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: message,
            });
        },

        // Helper untuk menampilkan pesan sukses menggunakan Swal
        showSuccess(message) {
            return Swal.fire({
                icon: "success",
                title: "Sukses",
                text: message,
                showConfirmButton: false,
                timer: 2000,
            });
        },

        // Tutup semua modal dan reset state terkait
        closeAllModals() {
            this.openCreateModal = false;
            this.openEditModalId = null;
            this.openDeleteModalId = null;
            this.errors = {};
            this.preview = null;
            this.previewEdit = null;
        },

        // Buka modal edit dan ambil data kartu dari server
        async openEditModal(id) {
            this.loading = true;
            this.errors = {};

            try {
                const response = await fetch(`/admin/cards/${id}/edit`);
                if (!response.ok)
                    throw new Error("Gagal mengambil data kartu.");

                const data = await response.json();
                // Pastikan URL gambar lengkap untuk preview
                if (data.image_url && !data.image_url.startsWith("http")) {
                    data.image_url = `${window.location.origin}/storage/${data.image_url}`;
                }
                this.cardData = data;
                this.openEditModalId = id;
                this.previewEdit = null;
                if (this.$refs.editImageInput) {
                    this.$refs.editImageInput.value = null;
                }
                // Reset nilai input file agar bisa dipilih ulang
                if (this.$refs.editImageInput) {
                    this.$refs.editImageInput.value = null;
                }
            } catch (error) {
                this.showError(error.message);
            } finally {
                this.loading = false;
            }
        },

        // Buka modal konfirmasi hapus dan set data kartu dari baris tabel
        openDeleteModal(id, event) {
            this.openDeleteModalId = id;
            if (event) {
                const row = event.target.closest("tr");
                if (row) {
                    this.cardData = {
                        title: row.cells[1].textContent,
                        description: row.cells[2].textContent,
                        external_link:
                            row.cells[3].querySelector("a")?.href || "",
                        image_url: row.cells[4].querySelector("img")?.src || "",
                    };
                }
            }
        },

        // Submit form tambah kartu dengan validasi client-side dan AJAX
        async submitCreateForm() {
            this.errors = {};

            // Validasi client-side
            if (!this.createForm.title || this.createForm.title.trim() === "") {
                this.errors.title = ["Nama/Judul Kartu wajib diisi."];
            }
            if (
                !this.createForm.description ||
                this.createForm.description.trim() === ""
            ) {
                this.errors.description = ["Deskripsi wajib diisi."];
            }
            // Validasi gambar menggunakan input file form
            const fileInput = this.$refs.createForm.querySelector(
                'input[name="image_url"]'
            );
            const hasImage =
                fileInput && fileInput.files && fileInput.files.length > 0;
            if (!hasImage) {
                this.errors.image_url = ["Gambar harus diunggah."];
            }

            // Jika ada error validasi client-side, hentikan submit
            if (Object.keys(this.errors).length > 0) {
                this.loading = false; // pastikan loading false saat error validasi client-side
                return;
            }

            this.loading = true;

            try {
                const formData = new FormData(this.$refs.createForm);
                const storeUrl = document.querySelector("#store_route").value;

                const response = await fetch(storeUrl, {
                    method: "POST",
                    headers: {
                        Accept: "application/json",
                        "X-CSRF-TOKEN": document.querySelector(
                            'meta[name="csrf-token"]'
                        ).content,
                    },
                    body: formData,
                });

                const data = await response.json();

                if (response.status === 422) {
                    this.errors = data.errors || {};
                    this.loading = false;
                    // Tetap buka modal dan tampilkan error inline
                    return;
                }

                if (!response.ok) {
                    this.loading = false;
                    await this.showError(
                        data.message || "Gagal menyimpan data."
                    );
                    // Tetap buka modal untuk koreksi
                    return;
                }

                // Tutup modal sebelum menampilkan pesan sukses
                this.openCreateModal = false;

                // Tampilkan pesan sukses
                await this.showSuccess(
                    data.message || "Kartu berhasil ditambahkan!"
                );

                // Reset form dan preview gambar
                this.createForm = {
                    title: "",
                    description: "",
                    external_link: "",
                    image_url: null,
                };
                this.preview = null;
                // Add small delay to ensure Alpine.js updates preview
                await new Promise((resolve) => setTimeout(resolve, 50));
                // Clear file input value to remove previous selected file
                const fileInput = this.$refs.createForm.querySelector(
                    'input[name="image_url"]'
                );
                if (fileInput) {
                    fileInput.value = null;
                }
                // Force Alpine.js to update preview immediately
                this.preview = null;

                // Refresh tabel tanpa reload halaman
                await this.refreshCardTable();
            } catch (error) {
                this.loading = false;
                await this.showError(error.message);
                // Tetap buka modal untuk koreksi
                return;
            } finally {
                this.loading = false;
            }
        },

        // Submit form edit kartu dengan validasi client-side dan AJAX
        async submitEditForm() {
            this.errors = {};
            this.loading = true; // tampilkan loading spinner saat tombol diklik

            // Delay agar loading spinner muncul di UI sebelum validasi
            await new Promise((resolve) => setTimeout(resolve, 400));

            // Validasi client-side
            if (!this.cardData.title || this.cardData.title.trim() === "") {
                this.errors.title = ["Nama/Judul Kartu wajib diisi."];
            }
            if (
                !this.cardData.description ||
                this.cardData.description.trim() === ""
            ) {
                this.errors.description = ["Deskripsi wajib diisi."];
            }
            // Cek apakah ada gambar lama atau baru
            const hasOldImage =
                this.cardData.image_url &&
                this.cardData.image_url.trim() !== "";
            const hasNewImage = this.previewEdit !== null;
            if (!hasOldImage && !hasNewImage) {
                this.errors.image_url = ["Gambar harus diunggah."];
            }

            // Jika ada error validasi client-side, hentikan submit
            if (Object.keys(this.errors).length > 0) {
                this.loading = false; // matikan loading spinner jika validasi gagal
                return;
            }

            try {
                const formData = new FormData(this.$refs.editForm);
                // Hapus field kosong untuk menghindari error validasi
                formData.forEach((value, key) => {
                    if (value === "" || value === null || value === undefined) {
                        formData.delete(key);
                    }
                });
                formData.set("_method", "PUT");

                const response = await fetch(
                    `/admin/cards/${this.openEditModalId}`,
                    {
                        method: "POST",
                        headers: {
                            Accept: "application/json",
                            "X-CSRF-TOKEN": document.querySelector(
                                'meta[name="csrf-token"]'
                            ).content,
                        },
                        body: formData,
                    }
                );

                const data = await response.json();

                if (response.status === 422) {
                    this.errors = data.errors || {};
                    this.loading = false;
                    // Tetap buka modal dan tampilkan error inline
                    return;
                }

                if (!response.ok) {
                    this.loading = false;
                    await this.showError(
                        data.message || "Gagal menyimpan data."
                    );
                    // Tetap buka modal untuk koreksi
                    return;
                }

                // Update URL gambar kartu jika ada dari response
                if (data.card && data.card.image_url) {
                    this.cardData.image_url = data.card.image_url;
                }

                // Reset previewEdit agar area upload tetap terlihat
                this.previewEdit = null;

                // Tutup modal sebelum menampilkan pesan sukses
                this.openEditModalId = null;

                // Refresh tabel sebelum menampilkan pesan sukses
                await this.refreshCardTable();

                // Tampilkan pesan sukses
                await this.showSuccess(
                    data.message || "Data kartu berhasil diperbarui!"
                );
            } catch (error) {
                this.loading = false;
                await this.showError(error.message);
                // Tetap buka modal untuk koreksi
                return;
            } finally {
                this.loading = false;
            }
        },

        // Submit form hapus kartu dengan AJAX
        async submitDeleteForm() {
            this.loading = true;
            this.errors = {};

            try {
                const response = await fetch(
                    `/admin/cards/${this.openDeleteModalId}`,
                    {
                        method: "DELETE",
                        headers: {
                            Accept: "application/json",
                            "X-CSRF-TOKEN": document.querySelector(
                                'meta[name="csrf-token"]'
                            ).content,
                        },
                    }
                );

                const data = await response.json();

                if (response.status === 422) {
                    this.errors = data.errors || {};
                    // Tutup modal segera
                    this.openDeleteModalId = null;
                    // Tampilkan popup error
                    await this.showError(data.message || "Validasi gagal.");
                    // Buka kembali modal untuk koreksi
                    this.openDeleteModalId = data.id || null;
                    return;
                }

                if (!response.ok) {
                    // Tutup modal segera
                    this.openDeleteModalId = null;
                    // Tampilkan popup error
                    await this.showError(
                        data.message || "Gagal menghapus data."
                    );
                    // Buka kembali modal untuk koreksi
                    this.openDeleteModalId = data.id || null;
                    return;
                }

                // Tutup modal sebelum menampilkan pesan sukses
                this.openDeleteModalId = null;

                // Tampilkan pesan sukses
                await this.showSuccess(
                    data.message || "Kartu berhasil dihapus!"
                );

                // Refresh tabel
                await this.refreshCardTable();
            } catch (error) {
                // Tutup modal segera
                this.openDeleteModalId = null;
                await this.showError(error.message);
                // Buka kembali modal untuk koreksi
                this.openDeleteModalId = null;
            } finally {
                this.loading = false;
            }
        },

        // Refresh tabel kartu tanpa reload halaman
        async refreshCardTable() {
            try {
                // Reset ke halaman pertama agar data baru/terupdate muncul
                const url = new URL(window.location.href);
                url.searchParams.set("page", "1");

                const response = await fetch(url.toString(), {
                    headers: {
                        "X-Requested-With": "XMLHttpRequest",
                    },
                    cache: "no-store",
                });

                if (!response.ok) throw new Error("Gagal memuat data kartu");

                const data = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(data, "text/html");
                const newTable = doc.querySelector("tbody");
                const newTotal = doc.querySelector("#totalCount");

                if (newTable) {
                    document.querySelector("tbody").innerHTML =
                        newTable.innerHTML;
                }

                if (newTotal) {
                    const totalElement = document.querySelector("#totalCount");
                    if (totalElement) {
                        totalElement.innerHTML = newTotal.innerHTML;
                    }
                }

                // Update pagination jika ada
                const newPagination = doc.querySelector(".pagination");
                if (newPagination) {
                    document.querySelector(".mt-4").innerHTML =
                        newPagination.outerHTML;
                }
            } catch (error) {
                console.error("Error refreshing table:", error);
                this.showError("Gagal memuat data terbaru");
            }
        },

        // Bersihkan preview gambar edit
        clearPreviewEdit() {
            this.previewEdit = null;
            if (this.$refs.editImageInput) {
                this.$refs.editImageInput.value = null;
            }
        },


        // aksi untuk aktif kartu

        async toggleCardStatus(id, isActive) {
            this.loading = true;

            try {
                const response = await fetch(
                    `/admin/cards/${id}/toggle-status`,
                    {
                        method: "POST",
                        headers: {
                            Accept: "application/json",
                            "X-CSRF-TOKEN": document.querySelector(
                                'meta[name="csrf-token"]'
                            ).content,
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ is_active: !isActive }),
                    }
                );

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(
                        data.message || "Gagal mengubah status kartu"
                    );
                }

                await this.showSuccess(
                    data.message || "Status kartu berhasil diubah"
                );

                // Update card count in realtime
                const activeCountElement =
                    document.querySelector("#activeCount");
                if (activeCountElement) {
                    const currentCount = parseInt(
                        activeCountElement.textContent
                    );
                    activeCountElement.textContent = isActive
                        ? currentCount - 1
                        : currentCount + 1;
                }

                // Refresh table data without reload
                await this.refreshCardTable();
            } catch (error) {
                this.showError(error.message);
            } finally {
                this.loading = false;
            }
        },
        // async toggleCardStatus(id, isActive) {
        //     this.loading = true;

        //     try {
        //         const response = await fetch(`/admin/cards/${id}/toggle-status`, {
        //             method: 'POST',
        //             headers: {
        //                 'Accept': 'application/json',
        //                 'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
        //                 'Content-Type': 'application/json'
        //             },
        //             body: JSON.stringify({ is_active: !isActive })
        //         });

        //         const data = await response.json();

        //         if (!response.ok) {
        //             throw new Error(data.message || 'Gagal mengubah status kartu');
        //         }

        //         await this.showSuccess(data.message || 'Status kartu berhasil diubah');
        //         await this.refreshCardTable();
        //     } catch (error) {
        //         this.showError(error.message);
        //     } finally {
        //         this.loading = false;
        //     }
        // },
    };
}
